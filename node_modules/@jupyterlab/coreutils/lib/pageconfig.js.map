{"version":3,"file":"pageconfig.js","sourceRoot":"","sources":["../../../../coreutils/src/pageconfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JSONExt } from '@phosphor/coreutils';\n\nimport minimist from 'minimist';\n\nimport { URLExt } from './url';\n\n/**\n * Declare stubs for the node variables.\n */\ndeclare var process: any;\ndeclare var require: any;\n\n/**\n * The namespace for Page Config functions.\n */\nexport namespace PageConfig {\n  /**\n   * The tree URL construction options.\n   */\n  export interface ITreeOptions {\n    /**\n     * If `true`, the tree URL will include the current workspace, if any.\n     */\n    workspace?: boolean;\n  }\n\n  /**\n   * Get global configuration data for the Jupyter application.\n   *\n   * @param name - The name of the configuration option.\n   *\n   * @returns The config value or an empty string if not found.\n   *\n   * #### Notes\n   * All values are treated as strings.\n   * For browser based applications, it is assumed that the page HTML\n   * includes a script tag with the id `jupyter-config-data` containing the\n   * configuration as valid JSON.  In order to support the classic Notebook,\n   * we fall back on checking for `body` data of the given `name`.\n   *\n   * For node applications, it is assumed that the process was launched\n   * with a `--jupyter-config-data` option pointing to a JSON settings\n   * file.\n   */\n  export function getOption(name: string): string {\n    if (configData) {\n      return configData[name] || Private.getBodyData(name);\n    }\n    configData = Object.create(null);\n    let found = false;\n\n    // Use script tag if available.\n    if (typeof document !== 'undefined') {\n      const el = document.getElementById('jupyter-config-data');\n\n      if (el) {\n        configData = JSON.parse(el.textContent || '') as {\n          [key: string]: string;\n        };\n        found = true;\n      }\n    }\n    // Otherwise use CLI if given.\n    if (!found && typeof process !== 'undefined') {\n      try {\n        const cli = minimist(process.argv.slice(2));\n        if ('jupyter-config-data' in cli) {\n          const path: any = require('path');\n          const fullPath = path.resolve(cli['jupyter-config-data']);\n\n          /* tslint:disable */\n          // Force Webpack to ignore this require.\n          configData = eval('require')(fullPath) as { [key: string]: string };\n          /* tslint:enable */\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    if (!JSONExt.isObject(configData)) {\n      configData = Object.create(null);\n    } else {\n      for (let key in configData) {\n        // Quote characters are escaped, unescape them.\n        configData[key] = String(configData[key])\n          .split('&#39;')\n          .join('\"');\n      }\n    }\n    return configData![name] || '';\n  }\n\n  /**\n   * Set global configuration data for the Jupyter application.\n   *\n   * @param name - The name of the configuration option.\n   * @param value - The value to set the option to.\n   *\n   * @returns The last config value or an empty string if it doesn't exist.\n   */\n  export function setOption(name: string, value: string): string {\n    const last = getOption(name);\n\n    configData![name] = value;\n    return last;\n  }\n\n  /**\n   * Get the base url for a Jupyter application.\n   */\n  export function getBaseUrl(): string {\n    let baseUrl = getOption('baseUrl');\n    if (!baseUrl || baseUrl === '/') {\n      baseUrl =\n        typeof location === 'undefined'\n          ? 'http://localhost:8888/'\n          : location.origin + '/';\n    }\n    return URLExt.parse(baseUrl).toString();\n  }\n\n  /**\n   * Get the tree url for a JupyterLab application.\n   *\n   * @param options - The tree URL construction options.\n   */\n  export function getTreeUrl(options: ITreeOptions = {}): string {\n    const base = getBaseUrl();\n    const page = getOption('pageUrl');\n    const workspaces = getOption('workspacesUrl');\n    const workspace = getOption('workspace');\n    const includeWorkspace = !!options.workspace;\n\n    if (includeWorkspace && workspace) {\n      return URLExt.join(base, workspaces, workspace, 'tree');\n    } else {\n      return URLExt.join(base, page, 'tree');\n    }\n  }\n\n  /**\n   * Get the base websocket url for a Jupyter application.\n   */\n  export function getWsUrl(baseUrl?: string): string {\n    let wsUrl = getOption('wsUrl');\n    if (!wsUrl) {\n      baseUrl = baseUrl || getBaseUrl();\n      if (baseUrl.indexOf('http') !== 0) {\n        if (typeof location !== 'undefined') {\n          baseUrl = URLExt.join(location.origin, baseUrl);\n        } else {\n          baseUrl = URLExt.join('http://localhost:8888/', baseUrl);\n        }\n      }\n      wsUrl = 'ws' + baseUrl.slice(4);\n    }\n    return URLExt.parse(wsUrl).toString();\n  }\n\n  /**\n   * Get the authorization token for a Jupyter application.\n   */\n  export function getToken(): string {\n    return getOption('token') || Private.getBodyData('jupyterApiToken');\n  }\n\n  /**\n   * Get the Notebook version info [major, minor, patch].\n   */\n  export function getNotebookVersion(): [number, number, number] {\n    const notebookVersion = getOption('notebookVersion');\n    if (notebookVersion === '') {\n      return [0, 0, 0];\n    }\n    return JSON.parse(notebookVersion);\n  }\n\n  /**\n   * Private page config data for the Jupyter application.\n   */\n  let configData: { [key: string]: string } | null = null;\n}\n\n/**\n * A namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Get a url-encoded item from `body.data` and decode it\n   * We should never have any encoded URLs anywhere else in code\n   * until we are building an actual request.\n   */\n  export function getBodyData(key: string): string {\n    if (typeof document === 'undefined' || !document.body) {\n      return '';\n    }\n    let val = document.body.dataset[key];\n    if (typeof val === 'undefined') {\n      return '';\n    }\n    return decodeURIComponent(val);\n  }\n}\n"]}